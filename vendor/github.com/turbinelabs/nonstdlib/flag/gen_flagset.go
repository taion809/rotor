/*
Copyright 2018 Turbine Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by prefixed_flagset.go from flagset.template.
// Any changes will be lost if this file is regenerated.

package flag

import (
	"time"

	"flag"
)

// FlagSet represents an optionally scoped *flag.FlagSet.
type FlagSet interface {
	// Scope creates a new scoped FlagSet. The name of any flag
	// added to the new FlagSet is prefixed with the given
	// prefix. In the flag's uage, the expression "{{NAME}}", is
	// replaced with the given description.
	Scope(prefix, description string) FlagSet

	// GetScope retrieves this FlagSet's scoping prefix, including
	// a trailing period.
	GetScope() string

	// Unwrap returns the flag.FlagSet underlying this FlagSet.
	Unwrap() *flag.FlagSet

	// Var defines a flag with the specified name and usage. The
	// flag's type and value are derived from value. See
	// flag.FlagSet.Var for more information.
	Var(value flag.Value, name string, usage string)

	// HostPortVar defines a HostPort flag with the specified name,
	// default value, and usage string. The argument hp points to a
	// HostPort variable in which to store the value of the flag.
	// The flag accepts "host:port" strings.
	HostPortVar(hp *HostPort, name string, value HostPort, usage string)

	// HostPort defines a HostPort flag with the specified name,
	// default value, and usage string. The return value is the
	// address of a HostPort variable that stores the value of the
	// flag. The flag accepts "host:port" strings.
	HostPort(name string, value HostPort, usage string) *HostPort

	// BoolVar defines a bool flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	BoolVar(p *bool, name string, value bool, usage string)

	// Bool defines a bool flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Bool(name string, value bool, usage string) *bool

	// DurationVar defines a time.Duration flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	DurationVar(p *time.Duration, name string, value time.Duration, usage string)

	// Duration defines a time.Duration flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Duration(name string, value time.Duration, usage string) *time.Duration

	// Float64Var defines a float64 flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	Float64Var(p *float64, name string, value float64, usage string)

	// Float64 defines a float64 flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Float64(name string, value float64, usage string) *float64

	// IntVar defines a int flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	IntVar(p *int, name string, value int, usage string)

	// Int defines a int flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Int(name string, value int, usage string) *int

	// Int64Var defines a int64 flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	Int64Var(p *int64, name string, value int64, usage string)

	// Int64 defines a int64 flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Int64(name string, value int64, usage string) *int64

	// StringVar defines a string flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	StringVar(p *string, name string, value string, usage string)

	// String defines a string flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	String(name string, value string, usage string) *string

	// UintVar defines a uint flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	UintVar(p *uint, name string, value uint, usage string)

	// Uint defines a uint flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Uint(name string, value uint, usage string) *uint

	// Uint64Var defines a uint64 flag with the specified name,
	// default value, and usage. The flag's value is stored in p.
	Uint64Var(p *uint64, name string, value uint64, usage string)

	// Uint64 defines a uint64 flag with the specified name,
	// default value, and usage. The return value is a pointer
	// to a variable that stores the flag's value.
	Uint64(name string, value uint64, usage string) *uint64
}
