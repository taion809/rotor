// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go

package executor

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecAndForget mocks base method
func (m *MockExecutor) ExecAndForget(arg0 Func) {
	m.ctrl.Call(m, "ExecAndForget", arg0)
}

// ExecAndForget indicates an expected call of ExecAndForget
func (mr *MockExecutorMockRecorder) ExecAndForget(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecAndForget", reflect.TypeOf((*MockExecutor)(nil).ExecAndForget), arg0)
}

// Exec mocks base method
func (m *MockExecutor) Exec(arg0 Func, arg1 CallbackFunc) {
	m.ctrl.Call(m, "Exec", arg0, arg1)
}

// Exec indicates an expected call of Exec
func (mr *MockExecutorMockRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecutor)(nil).Exec), arg0, arg1)
}

// ExecMany mocks base method
func (m *MockExecutor) ExecMany(arg0 []Func, arg1 ManyCallbackFunc) {
	m.ctrl.Call(m, "ExecMany", arg0, arg1)
}

// ExecMany indicates an expected call of ExecMany
func (mr *MockExecutorMockRecorder) ExecMany(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecMany", reflect.TypeOf((*MockExecutor)(nil).ExecMany), arg0, arg1)
}

// ExecGathered mocks base method
func (m *MockExecutor) ExecGathered(arg0 []Func, arg1 CallbackFunc) {
	m.ctrl.Call(m, "ExecGathered", arg0, arg1)
}

// ExecGathered indicates an expected call of ExecGathered
func (mr *MockExecutorMockRecorder) ExecGathered(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecGathered", reflect.TypeOf((*MockExecutor)(nil).ExecGathered), arg0, arg1)
}

// Stop mocks base method
func (m *MockExecutor) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockExecutorMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockExecutor)(nil).Stop))
}

// SetDiagnosticsCallback mocks base method
func (m *MockExecutor) SetDiagnosticsCallback(arg0 DiagnosticsCallback) {
	m.ctrl.Call(m, "SetDiagnosticsCallback", arg0)
}

// SetDiagnosticsCallback indicates an expected call of SetDiagnosticsCallback
func (mr *MockExecutorMockRecorder) SetDiagnosticsCallback(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDiagnosticsCallback", reflect.TypeOf((*MockExecutor)(nil).SetDiagnosticsCallback), arg0)
}
