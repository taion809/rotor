// Code generated by MockGen. DO NOT EDIT.
// Source: version.go

package app

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVersion is a mock of Version interface
type MockVersion struct {
	ctrl     *gomock.Controller
	recorder *MockVersionMockRecorder
}

// MockVersionMockRecorder is the mock recorder for MockVersion
type MockVersionMockRecorder struct {
	mock *MockVersion
}

// NewMockVersion creates a new mock instance
func NewMockVersion(ctrl *gomock.Controller) *MockVersion {
	mock := &MockVersion{ctrl: ctrl}
	mock.recorder = &MockVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVersion) EXPECT() *MockVersionMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *MockVersion) Describe() string {
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(string)
	return ret0
}

// Describe indicates an expected call of Describe
func (mr *MockVersionMockRecorder) Describe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockVersion)(nil).Describe))
}

// Version mocks base method
func (m *MockVersion) Version() string {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockVersionMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockVersion)(nil).Version))
}

// Metadata mocks base method
func (m *MockVersion) Metadata() VersionMetadata {
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(VersionMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata
func (mr *MockVersionMockRecorder) Metadata() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockVersion)(nil).Metadata))
}
