// Code generated by MockGen. DO NOT EDIT.
// Source: usage.go

package app

import (
	gomock "github.com/golang/mock/gomock"
	command "github.com/turbinelabs/cli/command"
	flag "github.com/turbinelabs/nonstdlib/flag"
	reflect "reflect"
)

// MockUsage is a mock of Usage interface
type MockUsage struct {
	ctrl     *gomock.Controller
	recorder *MockUsageMockRecorder
}

// MockUsageMockRecorder is the mock recorder for MockUsage
type MockUsageMockRecorder struct {
	mock *MockUsage
}

// NewMockUsage creates a new mock instance
func NewMockUsage(ctrl *gomock.Controller) *MockUsage {
	mock := &MockUsage{ctrl: ctrl}
	mock.recorder = &MockUsageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsage) EXPECT() *MockUsageMockRecorder {
	return m.recorder
}

// Global mocks base method
func (m *MockUsage) Global(cmds []*command.Cmd, flagsFromEnv flag.FromEnv) {
	m.ctrl.Call(m, "Global", cmds, flagsFromEnv)
}

// Global indicates an expected call of Global
func (mr *MockUsageMockRecorder) Global(cmds, flagsFromEnv interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Global", reflect.TypeOf((*MockUsage)(nil).Global), cmds, flagsFromEnv)
}

// Command mocks base method
func (m *MockUsage) Command(cmd *command.Cmd, globalFlagsFromEnv, cmdFlagsFromEnv flag.FromEnv) {
	m.ctrl.Call(m, "Command", cmd, globalFlagsFromEnv, cmdFlagsFromEnv)
}

// Command indicates an expected call of Command
func (mr *MockUsageMockRecorder) Command(cmd, globalFlagsFromEnv, cmdFlagsFromEnv interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockUsage)(nil).Command), cmd, globalFlagsFromEnv, cmdFlagsFromEnv)
}
