// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

package collector

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	reflect "reflect"
)

// MockClusterCollector is a mock of ClusterCollector interface
type MockClusterCollector struct {
	ctrl     *gomock.Controller
	recorder *MockClusterCollectorMockRecorder
}

// MockClusterCollectorMockRecorder is the mock recorder for MockClusterCollector
type MockClusterCollectorMockRecorder struct {
	mock *MockClusterCollector
}

// NewMockClusterCollector creates a new mock instance
func NewMockClusterCollector(ctrl *gomock.Controller) *MockClusterCollector {
	mock := &MockClusterCollector{ctrl: ctrl}
	mock.recorder = &MockClusterCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterCollector) EXPECT() *MockClusterCollectorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClusterCollector) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClusterCollectorMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClusterCollector)(nil).Close))
}

// Collect mocks base method
func (m *MockClusterCollector) Collect() (api.Clusters, map[string][]error) {
	ret := m.ctrl.Call(m, "Collect")
	ret0, _ := ret[0].(api.Clusters)
	ret1, _ := ret[1].(map[string][]error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect
func (mr *MockClusterCollectorMockRecorder) Collect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockClusterCollector)(nil).Collect))
}
