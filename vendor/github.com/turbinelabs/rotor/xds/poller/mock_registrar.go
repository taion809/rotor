// Code generated by MockGen. DO NOT EDIT.
// Source: registrar.go

package poller

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	service "github.com/turbinelabs/api/service"
	reflect "reflect"
)

// MockRegistrar is a mock of Registrar interface
type MockRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrarMockRecorder
}

// MockRegistrarMockRecorder is the mock recorder for MockRegistrar
type MockRegistrarMockRecorder struct {
	mock *MockRegistrar
}

// NewMockRegistrar creates a new mock instance
func NewMockRegistrar(ctrl *gomock.Controller) *MockRegistrar {
	mock := &MockRegistrar{ctrl: ctrl}
	mock.recorder = &MockRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistrar) EXPECT() *MockRegistrarMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRegistrar) Register(pRef service.ProxyRef, ifFirst func(service.All, api.Proxy)) error {
	ret := m.ctrl.Call(m, "Register", pRef, ifFirst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockRegistrarMockRecorder) Register(pRef, ifFirst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrar)(nil).Register), pRef, ifFirst)
}

// Deregister mocks base method
func (m *MockRegistrar) Deregister(pRef service.ProxyRef, ifLast func()) error {
	ret := m.ctrl.Call(m, "Deregister", pRef, ifLast)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deregister indicates an expected call of Deregister
func (mr *MockRegistrarMockRecorder) Deregister(pRef, ifLast interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockRegistrar)(nil).Deregister), pRef, ifLast)
}

// Refs mocks base method
func (m *MockRegistrar) Refs() []service.ProxyRef {
	ret := m.ctrl.Call(m, "Refs")
	ret0, _ := ret[0].([]service.ProxyRef)
	return ret0
}

// Refs indicates an expected call of Refs
func (mr *MockRegistrarMockRecorder) Refs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refs", reflect.TypeOf((*MockRegistrar)(nil).Refs))
}
