// Code generated by MockGen. DO NOT EDIT.
// Source: remote.go

package poller

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	reflect "reflect"
)

// MockRemote is a mock of Remote interface
type MockRemote struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteMockRecorder
}

// MockRemoteMockRecorder is the mock recorder for MockRemote
type MockRemoteMockRecorder struct {
	mock *MockRemote
}

// NewMockRemote creates a new mock instance
func NewMockRemote(ctrl *gomock.Controller) *MockRemote {
	mock := &MockRemote{ctrl: ctrl}
	mock.recorder = &MockRemoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemote) EXPECT() *MockRemoteMockRecorder {
	return m.recorder
}

// Objects mocks base method
func (m *MockRemote) Objects(proxyKey api.ProxyKey) (*Objects, error) {
	ret := m.ctrl.Call(m, "Objects", proxyKey)
	ret0, _ := ret[0].(*Objects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Objects indicates an expected call of Objects
func (mr *MockRemoteMockRecorder) Objects(proxyKey interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockRemote)(nil).Objects), proxyKey)
}

// ObjectsWithOverrides mocks base method
func (m *MockRemote) ObjectsWithOverrides(proxyKey api.ProxyKey, overrides map[string]ObjectsUpdateFn, newProxy *api.Proxy) (*Objects, error) {
	ret := m.ctrl.Call(m, "ObjectsWithOverrides", proxyKey, overrides, newProxy)
	ret0, _ := ret[0].(*Objects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectsWithOverrides indicates an expected call of ObjectsWithOverrides
func (mr *MockRemoteMockRecorder) ObjectsWithOverrides(proxyKey, overrides, newProxy interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectsWithOverrides", reflect.TypeOf((*MockRemote)(nil).ObjectsWithOverrides), proxyKey, overrides, newProxy)
}
