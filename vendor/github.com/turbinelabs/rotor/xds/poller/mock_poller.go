// Code generated by MockGen. DO NOT EDIT.
// Source: poller.go

package poller

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConsumer is a mock of Consumer interface
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method
func (m *MockConsumer) Consume(arg0 *Objects) error {
	ret := m.ctrl.Call(m, "Consume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume
func (mr *MockConsumerMockRecorder) Consume(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), arg0)
}

// MockPoller is a mock of Poller interface
type MockPoller struct {
	ctrl     *gomock.Controller
	recorder *MockPollerMockRecorder
}

// MockPollerMockRecorder is the mock recorder for MockPoller
type MockPollerMockRecorder struct {
	mock *MockPoller
}

// NewMockPoller creates a new mock instance
func NewMockPoller(ctrl *gomock.Controller) *MockPoller {
	mock := &MockPoller{ctrl: ctrl}
	mock.recorder = &MockPollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoller) EXPECT() *MockPollerMockRecorder {
	return m.recorder
}

// Poll mocks base method
func (m *MockPoller) Poll() error {
	ret := m.ctrl.Call(m, "Poll")
	ret0, _ := ret[0].(error)
	return ret0
}

// Poll indicates an expected call of Poll
func (mr *MockPollerMockRecorder) Poll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockPoller)(nil).Poll))
}

// PollLoop mocks base method
func (m *MockPoller) PollLoop() {
	m.ctrl.Call(m, "PollLoop")
}

// PollLoop indicates an expected call of PollLoop
func (mr *MockPollerMockRecorder) PollLoop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollLoop", reflect.TypeOf((*MockPoller)(nil).PollLoop))
}

// Close mocks base method
func (m *MockPoller) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPollerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoller)(nil).Close))
}
