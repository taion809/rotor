// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go

package adapter

import (
	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	cache "github.com/envoyproxy/go-control-plane/pkg/cache"
	gomock "github.com/golang/mock/gomock"
	poller "github.com/turbinelabs/rotor/xds/poller"
	reflect "reflect"
)

// mockResourceAdapter is a mock of resourceAdapter interface
type mockResourceAdapter struct {
	ctrl     *gomock.Controller
	recorder *mockResourceAdapterMockRecorder
}

// mockResourceAdapterMockRecorder is the mock recorder for mockResourceAdapter
type mockResourceAdapterMockRecorder struct {
	mock *mockResourceAdapter
}

// newMockResourceAdapter creates a new mock instance
func newMockResourceAdapter(ctrl *gomock.Controller) *mockResourceAdapter {
	mock := &mockResourceAdapter{ctrl: ctrl}
	mock.recorder = &mockResourceAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockResourceAdapter) EXPECT() *mockResourceAdapterMockRecorder {
	return m.recorder
}

// adapt mocks base method
func (m *mockResourceAdapter) adapt(arg0 *poller.Objects) (cache.Resources, error) {
	ret := m.ctrl.Call(m, "adapt", arg0)
	ret0, _ := ret[0].(cache.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// adapt indicates an expected call of adapt
func (mr *mockResourceAdapterMockRecorder) adapt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "adapt", reflect.TypeOf((*mockResourceAdapter)(nil).adapt), arg0)
}

// mockListenerAdapter is a mock of listenerAdapter interface
type mockListenerAdapter struct {
	ctrl     *gomock.Controller
	recorder *mockListenerAdapterMockRecorder
}

// mockListenerAdapterMockRecorder is the mock recorder for mockListenerAdapter
type mockListenerAdapterMockRecorder struct {
	mock *mockListenerAdapter
}

// newMockListenerAdapter creates a new mock instance
func newMockListenerAdapter(ctrl *gomock.Controller) *mockListenerAdapter {
	mock := &mockListenerAdapter{ctrl: ctrl}
	mock.recorder = &mockListenerAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockListenerAdapter) EXPECT() *mockListenerAdapterMockRecorder {
	return m.recorder
}

// adapt mocks base method
func (m *mockListenerAdapter) adapt(arg0 *poller.Objects) (cache.Resources, error) {
	ret := m.ctrl.Call(m, "adapt", arg0)
	ret0, _ := ret[0].(cache.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// adapt indicates an expected call of adapt
func (mr *mockListenerAdapterMockRecorder) adapt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "adapt", reflect.TypeOf((*mockListenerAdapter)(nil).adapt), arg0)
}

// inject mocks base method
func (m *mockListenerAdapter) inject(arg0 *v2.Listener) error {
	ret := m.ctrl.Call(m, "inject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// inject indicates an expected call of inject
func (mr *mockListenerAdapterMockRecorder) inject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "inject", reflect.TypeOf((*mockListenerAdapter)(nil).inject), arg0)
}

// mockClusterAdapter is a mock of clusterAdapter interface
type mockClusterAdapter struct {
	ctrl     *gomock.Controller
	recorder *mockClusterAdapterMockRecorder
}

// mockClusterAdapterMockRecorder is the mock recorder for mockClusterAdapter
type mockClusterAdapterMockRecorder struct {
	mock *mockClusterAdapter
}

// newMockClusterAdapter creates a new mock instance
func newMockClusterAdapter(ctrl *gomock.Controller) *mockClusterAdapter {
	mock := &mockClusterAdapter{ctrl: ctrl}
	mock.recorder = &mockClusterAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockClusterAdapter) EXPECT() *mockClusterAdapterMockRecorder {
	return m.recorder
}

// adapt mocks base method
func (m *mockClusterAdapter) adapt(arg0 *poller.Objects) (cache.Resources, error) {
	ret := m.ctrl.Call(m, "adapt", arg0)
	ret0, _ := ret[0].(cache.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// adapt indicates an expected call of adapt
func (mr *mockClusterAdapterMockRecorder) adapt(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "adapt", reflect.TypeOf((*mockClusterAdapter)(nil).adapt), arg0)
}

// withTemplate mocks base method
func (m *mockClusterAdapter) withTemplate(arg0 *v2.Cluster) clusterAdapter {
	ret := m.ctrl.Call(m, "withTemplate", arg0)
	ret0, _ := ret[0].(clusterAdapter)
	return ret0
}

// withTemplate indicates an expected call of withTemplate
func (mr *mockClusterAdapterMockRecorder) withTemplate(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "withTemplate", reflect.TypeOf((*mockClusterAdapter)(nil).withTemplate), arg0)
}
