// Code generated by MockGen. DO NOT EDIT.
// Source: caching_consumer.go

package adapter

import (
	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	gomock "github.com/golang/mock/gomock"
	service "github.com/turbinelabs/api/service"
	poller "github.com/turbinelabs/rotor/xds/poller"
	reflect "reflect"
)

// mockCachingConsumer is a mock of cachingConsumer interface
type mockCachingConsumer struct {
	ctrl     *gomock.Controller
	recorder *mockCachingConsumerMockRecorder
}

// mockCachingConsumerMockRecorder is the mock recorder for mockCachingConsumer
type mockCachingConsumerMockRecorder struct {
	mock *mockCachingConsumer
}

// newMockCachingConsumer creates a new mock instance
func newMockCachingConsumer(ctrl *gomock.Controller) *mockCachingConsumer {
	mock := &mockCachingConsumer{ctrl: ctrl}
	mock.recorder = &mockCachingConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockCachingConsumer) EXPECT() *mockCachingConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method
func (m *mockCachingConsumer) Consume(arg0 *poller.Objects) error {
	ret := m.ctrl.Call(m, "Consume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume
func (mr *mockCachingConsumerMockRecorder) Consume(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*mockCachingConsumer)(nil).Consume), arg0)
}

// OnStreamOpen mocks base method
func (m *mockCachingConsumer) OnStreamOpen(arg0 int64, arg1 string) {
	m.ctrl.Call(m, "OnStreamOpen", arg0, arg1)
}

// OnStreamOpen indicates an expected call of OnStreamOpen
func (mr *mockCachingConsumerMockRecorder) OnStreamOpen(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStreamOpen", reflect.TypeOf((*mockCachingConsumer)(nil).OnStreamOpen), arg0, arg1)
}

// OnStreamClosed mocks base method
func (m *mockCachingConsumer) OnStreamClosed(arg0 int64) {
	m.ctrl.Call(m, "OnStreamClosed", arg0)
}

// OnStreamClosed indicates an expected call of OnStreamClosed
func (mr *mockCachingConsumerMockRecorder) OnStreamClosed(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStreamClosed", reflect.TypeOf((*mockCachingConsumer)(nil).OnStreamClosed), arg0)
}

// OnStreamRequest mocks base method
func (m *mockCachingConsumer) OnStreamRequest(arg0 int64, arg1 *v2.DiscoveryRequest) {
	m.ctrl.Call(m, "OnStreamRequest", arg0, arg1)
}

// OnStreamRequest indicates an expected call of OnStreamRequest
func (mr *mockCachingConsumerMockRecorder) OnStreamRequest(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStreamRequest", reflect.TypeOf((*mockCachingConsumer)(nil).OnStreamRequest), arg0, arg1)
}

// OnStreamResponse mocks base method
func (m *mockCachingConsumer) OnStreamResponse(arg0 int64, arg1 *v2.DiscoveryRequest, arg2 *v2.DiscoveryResponse) {
	m.ctrl.Call(m, "OnStreamResponse", arg0, arg1, arg2)
}

// OnStreamResponse indicates an expected call of OnStreamResponse
func (mr *mockCachingConsumerMockRecorder) OnStreamResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStreamResponse", reflect.TypeOf((*mockCachingConsumer)(nil).OnStreamResponse), arg0, arg1, arg2)
}

// OnFetchRequest mocks base method
func (m *mockCachingConsumer) OnFetchRequest(arg0 *v2.DiscoveryRequest) {
	m.ctrl.Call(m, "OnFetchRequest", arg0)
}

// OnFetchRequest indicates an expected call of OnFetchRequest
func (mr *mockCachingConsumerMockRecorder) OnFetchRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFetchRequest", reflect.TypeOf((*mockCachingConsumer)(nil).OnFetchRequest), arg0)
}

// OnFetchResponse mocks base method
func (m *mockCachingConsumer) OnFetchResponse(arg0 *v2.DiscoveryRequest, arg1 *v2.DiscoveryResponse) {
	m.ctrl.Call(m, "OnFetchResponse", arg0, arg1)
}

// OnFetchResponse indicates an expected call of OnFetchResponse
func (mr *mockCachingConsumerMockRecorder) OnFetchResponse(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFetchResponse", reflect.TypeOf((*mockCachingConsumer)(nil).OnFetchResponse), arg0, arg1)
}

// mockStreamRefsIface is a mock of streamRefsIface interface
type mockStreamRefsIface struct {
	ctrl     *gomock.Controller
	recorder *mockStreamRefsIfaceMockRecorder
}

// mockStreamRefsIfaceMockRecorder is the mock recorder for mockStreamRefsIface
type mockStreamRefsIfaceMockRecorder struct {
	mock *mockStreamRefsIface
}

// newMockStreamRefsIface creates a new mock instance
func newMockStreamRefsIface(ctrl *gomock.Controller) *mockStreamRefsIface {
	mock := &mockStreamRefsIface{ctrl: ctrl}
	mock.recorder = &mockStreamRefsIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockStreamRefsIface) EXPECT() *mockStreamRefsIfaceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *mockStreamRefsIface) Add(streamID int64, ref service.ProxyRef) {
	m.ctrl.Call(m, "Add", streamID, ref)
}

// Add indicates an expected call of Add
func (mr *mockStreamRefsIfaceMockRecorder) Add(streamID, ref interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*mockStreamRefsIface)(nil).Add), streamID, ref)
}

// Remove mocks base method
func (m *mockStreamRefsIface) Remove(streamID int64, ref service.ProxyRef) {
	m.ctrl.Call(m, "Remove", streamID, ref)
}

// Remove indicates an expected call of Remove
func (mr *mockStreamRefsIfaceMockRecorder) Remove(streamID, ref interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*mockStreamRefsIface)(nil).Remove), streamID, ref)
}

// RemoveAll mocks base method
func (m *mockStreamRefsIface) RemoveAll(streamID int64) []service.ProxyRef {
	ret := m.ctrl.Call(m, "RemoveAll", streamID)
	ret0, _ := ret[0].([]service.ProxyRef)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *mockStreamRefsIfaceMockRecorder) RemoveAll(streamID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*mockStreamRefsIface)(nil).RemoveAll), streamID)
}
