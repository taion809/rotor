// Code generated by MockGen. DO NOT EDIT.
// Source: updater.go

package updater

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	reflect "reflect"
	time "time"
)

// MockUpdater is a mock of Updater interface
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Replace mocks base method
func (m *MockUpdater) Replace(clusters []api.Cluster) {
	m.ctrl.Call(m, "Replace", clusters)
}

// Replace indicates an expected call of Replace
func (mr *MockUpdaterMockRecorder) Replace(clusters interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockUpdater)(nil).Replace), clusters)
}

// Delay mocks base method
func (m *MockUpdater) Delay() time.Duration {
	ret := m.ctrl.Call(m, "Delay")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Delay indicates an expected call of Delay
func (mr *MockUpdaterMockRecorder) Delay() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delay", reflect.TypeOf((*MockUpdater)(nil).Delay))
}

// ZoneName mocks base method
func (m *MockUpdater) ZoneName() string {
	ret := m.ctrl.Call(m, "ZoneName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ZoneName indicates an expected call of ZoneName
func (mr *MockUpdaterMockRecorder) ZoneName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZoneName", reflect.TypeOf((*MockUpdater)(nil).ZoneName))
}

// Close mocks base method
func (m *MockUpdater) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockUpdaterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUpdater)(nil).Close))
}
