// Code generated by MockGen. DO NOT EDIT.
// Source: updater_fromflags.go

package rotor

import (
	gomock "github.com/golang/mock/gomock"
	updater "github.com/turbinelabs/rotor/updater"
	adapter "github.com/turbinelabs/rotor/xds/adapter"
	reflect "reflect"
)

// MockUpdaterFromFlags is a mock of UpdaterFromFlags interface
type MockUpdaterFromFlags struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterFromFlagsMockRecorder
}

// MockUpdaterFromFlagsMockRecorder is the mock recorder for MockUpdaterFromFlags
type MockUpdaterFromFlagsMockRecorder struct {
	mock *MockUpdaterFromFlags
}

// NewMockUpdaterFromFlags creates a new mock instance
func NewMockUpdaterFromFlags(ctrl *gomock.Controller) *MockUpdaterFromFlags {
	mock := &MockUpdaterFromFlags{ctrl: ctrl}
	mock.recorder = &MockUpdaterFromFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdaterFromFlags) EXPECT() *MockUpdaterFromFlagsMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockUpdaterFromFlags) Validate() error {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockUpdaterFromFlagsMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUpdaterFromFlags)(nil).Validate))
}

// ValidateXDSOnly mocks base method
func (m *MockUpdaterFromFlags) ValidateXDSOnly() error {
	ret := m.ctrl.Call(m, "ValidateXDSOnly")
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateXDSOnly indicates an expected call of ValidateXDSOnly
func (mr *MockUpdaterFromFlagsMockRecorder) ValidateXDSOnly() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateXDSOnly", reflect.TypeOf((*MockUpdaterFromFlags)(nil).ValidateXDSOnly))
}

// Make mocks base method
func (m *MockUpdaterFromFlags) Make() (updater.Updater, error) {
	ret := m.ctrl.Call(m, "Make")
	ret0, _ := ret[0].(updater.Updater)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Make indicates an expected call of Make
func (mr *MockUpdaterFromFlagsMockRecorder) Make() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockUpdaterFromFlags)(nil).Make))
}

// MakeXDS mocks base method
func (m *MockUpdaterFromFlags) MakeXDS() (adapter.XDS, error) {
	ret := m.ctrl.Call(m, "MakeXDS")
	ret0, _ := ret[0].(adapter.XDS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeXDS indicates an expected call of MakeXDS
func (mr *MockUpdaterFromFlagsMockRecorder) MakeXDS() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeXDS", reflect.TypeOf((*MockUpdaterFromFlags)(nil).MakeXDS))
}
