// Code generated by MockGen. DO NOT EDIT.
// Source: ecs_aws.go

package aws

import (
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	ecs "github.com/aws/aws-sdk-go/service/ecs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// mockAwsClient is a mock of awsClient interface
type mockAwsClient struct {
	ctrl     *gomock.Controller
	recorder *mockAwsClientMockRecorder
}

// mockAwsClientMockRecorder is the mock recorder for mockAwsClient
type mockAwsClientMockRecorder struct {
	mock *mockAwsClient
}

// newMockAwsClient creates a new mock instance
func newMockAwsClient(ctrl *gomock.Controller) *mockAwsClient {
	mock := &mockAwsClient{ctrl: ctrl}
	mock.recorder = &mockAwsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockAwsClient) EXPECT() *mockAwsClientMockRecorder {
	return m.recorder
}

// ListClusters mocks base method
func (m *mockAwsClient) ListClusters() (map[string]arn, error) {
	ret := m.ctrl.Call(m, "ListClusters")
	ret0, _ := ret[0].(map[string]arn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *mockAwsClientMockRecorder) ListClusters() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*mockAwsClient)(nil).ListClusters))
}

// ListServices mocks base method
func (m *mockAwsClient) ListServices(cluster string) (map[string]arn, error) {
	ret := m.ctrl.Call(m, "ListServices", cluster)
	ret0, _ := ret[0].(map[string]arn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *mockAwsClientMockRecorder) ListServices(cluster interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*mockAwsClient)(nil).ListServices), cluster)
}

// ListTasks mocks base method
func (m *mockAwsClient) ListTasks(cluster string, svc arn) ([]arn, error) {
	ret := m.ctrl.Call(m, "ListTasks", cluster, svc)
	ret0, _ := ret[0].([]arn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *mockAwsClientMockRecorder) ListTasks(cluster, svc interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*mockAwsClient)(nil).ListTasks), cluster, svc)
}

// ServiceDefinitions mocks base method
func (m *mockAwsClient) ServiceDefinitions(cluster string, svcARN []arn) (map[arn]svcDefn, error) {
	ret := m.ctrl.Call(m, "ServiceDefinitions", cluster, svcARN)
	ret0, _ := ret[0].(map[arn]svcDefn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceDefinitions indicates an expected call of ServiceDefinitions
func (mr *mockAwsClientMockRecorder) ServiceDefinitions(cluster, svcARN interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceDefinitions", reflect.TypeOf((*mockAwsClient)(nil).ServiceDefinitions), cluster, svcARN)
}

// TaskDefinition mocks base method
func (m *mockAwsClient) TaskDefinition(taskARN arn) (taskDefn, error) {
	ret := m.ctrl.Call(m, "TaskDefinition", taskARN)
	ret0, _ := ret[0].(taskDefn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskDefinition indicates an expected call of TaskDefinition
func (mr *mockAwsClientMockRecorder) TaskDefinition(taskARN interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskDefinition", reflect.TypeOf((*mockAwsClient)(nil).TaskDefinition), taskARN)
}

// GetTasks mocks base method
func (m *mockAwsClient) GetTasks(hasTasks map[arn]taskInst, cluster string, taskARN ...arn) (map[arn]taskInst, error) {
	varargs := []interface{}{hasTasks, cluster}
	for _, a := range taskARN {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTasks", varargs...)
	ret0, _ := ret[0].(map[arn]taskInst)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks
func (mr *mockAwsClientMockRecorder) GetTasks(hasTasks, cluster interface{}, taskARN ...interface{}) *gomock.Call {
	varargs := append([]interface{}{hasTasks, cluster}, taskARN...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*mockAwsClient)(nil).GetTasks), varargs...)
}

// GetContainerInstances mocks base method
func (m *mockAwsClient) GetContainerInstances(hasContainers map[arn]containerInst, cluster string, ciarn ...arn) (map[arn]containerInst, error) {
	varargs := []interface{}{hasContainers, cluster}
	for _, a := range ciarn {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainerInstances", varargs...)
	ret0, _ := ret[0].(map[arn]containerInst)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerInstances indicates an expected call of GetContainerInstances
func (mr *mockAwsClientMockRecorder) GetContainerInstances(hasContainers, cluster interface{}, ciarn ...interface{}) *gomock.Call {
	varargs := append([]interface{}{hasContainers, cluster}, ciarn...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerInstances", reflect.TypeOf((*mockAwsClient)(nil).GetContainerInstances), varargs...)
}

// GetEC2Instances mocks base method
func (m *mockAwsClient) GetEC2Instances(instIDs ...string) (map[string]ec2Instance, error) {
	varargs := []interface{}{}
	for _, a := range instIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEC2Instances", varargs...)
	ret0, _ := ret[0].(map[string]ec2Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEC2Instances indicates an expected call of GetEC2Instances
func (mr *mockAwsClientMockRecorder) GetEC2Instances(instIDs ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEC2Instances", reflect.TypeOf((*mockAwsClient)(nil).GetEC2Instances), instIDs...)
}

// mockEcsInterface is a mock of ecsInterface interface
type mockEcsInterface struct {
	ctrl     *gomock.Controller
	recorder *mockEcsInterfaceMockRecorder
}

// mockEcsInterfaceMockRecorder is the mock recorder for mockEcsInterface
type mockEcsInterfaceMockRecorder struct {
	mock *mockEcsInterface
}

// newMockEcsInterface creates a new mock instance
func newMockEcsInterface(ctrl *gomock.Controller) *mockEcsInterface {
	mock := &mockEcsInterface{ctrl: ctrl}
	mock.recorder = &mockEcsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockEcsInterface) EXPECT() *mockEcsInterfaceMockRecorder {
	return m.recorder
}

// ListClusters mocks base method
func (m *mockEcsInterface) ListClusters(arg0 *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	ret := m.ctrl.Call(m, "ListClusters", arg0)
	ret0, _ := ret[0].(*ecs.ListClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters
func (mr *mockEcsInterfaceMockRecorder) ListClusters(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*mockEcsInterface)(nil).ListClusters), arg0)
}

// ListServices mocks base method
func (m *mockEcsInterface) ListServices(arg0 *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	ret := m.ctrl.Call(m, "ListServices", arg0)
	ret0, _ := ret[0].(*ecs.ListServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *mockEcsInterfaceMockRecorder) ListServices(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*mockEcsInterface)(nil).ListServices), arg0)
}

// ListTasks mocks base method
func (m *mockEcsInterface) ListTasks(arg0 *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	ret := m.ctrl.Call(m, "ListTasks", arg0)
	ret0, _ := ret[0].(*ecs.ListTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *mockEcsInterfaceMockRecorder) ListTasks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*mockEcsInterface)(nil).ListTasks), arg0)
}

// DescribeServices mocks base method
func (m *mockEcsInterface) DescribeServices(arg0 *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	ret := m.ctrl.Call(m, "DescribeServices", arg0)
	ret0, _ := ret[0].(*ecs.DescribeServicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeServices indicates an expected call of DescribeServices
func (mr *mockEcsInterfaceMockRecorder) DescribeServices(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeServices", reflect.TypeOf((*mockEcsInterface)(nil).DescribeServices), arg0)
}

// DescribeTaskDefinition mocks base method
func (m *mockEcsInterface) DescribeTaskDefinition(arg0 *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	ret := m.ctrl.Call(m, "DescribeTaskDefinition", arg0)
	ret0, _ := ret[0].(*ecs.DescribeTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTaskDefinition indicates an expected call of DescribeTaskDefinition
func (mr *mockEcsInterfaceMockRecorder) DescribeTaskDefinition(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskDefinition", reflect.TypeOf((*mockEcsInterface)(nil).DescribeTaskDefinition), arg0)
}

// DescribeTasks mocks base method
func (m *mockEcsInterface) DescribeTasks(arg0 *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	ret := m.ctrl.Call(m, "DescribeTasks", arg0)
	ret0, _ := ret[0].(*ecs.DescribeTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTasks indicates an expected call of DescribeTasks
func (mr *mockEcsInterfaceMockRecorder) DescribeTasks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTasks", reflect.TypeOf((*mockEcsInterface)(nil).DescribeTasks), arg0)
}

// DescribeContainerInstances mocks base method
func (m *mockEcsInterface) DescribeContainerInstances(arg0 *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	ret := m.ctrl.Call(m, "DescribeContainerInstances", arg0)
	ret0, _ := ret[0].(*ecs.DescribeContainerInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContainerInstances indicates an expected call of DescribeContainerInstances
func (mr *mockEcsInterfaceMockRecorder) DescribeContainerInstances(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContainerInstances", reflect.TypeOf((*mockEcsInterface)(nil).DescribeContainerInstances), arg0)
}

// mockEc2Interface is a mock of ec2Interface interface
type mockEc2Interface struct {
	ctrl     *gomock.Controller
	recorder *mockEc2InterfaceMockRecorder
}

// mockEc2InterfaceMockRecorder is the mock recorder for mockEc2Interface
type mockEc2InterfaceMockRecorder struct {
	mock *mockEc2Interface
}

// newMockEc2Interface creates a new mock instance
func newMockEc2Interface(ctrl *gomock.Controller) *mockEc2Interface {
	mock := &mockEc2Interface{ctrl: ctrl}
	mock.recorder = &mockEc2InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockEc2Interface) EXPECT() *mockEc2InterfaceMockRecorder {
	return m.recorder
}

// DescribeInstances mocks base method
func (m *mockEc2Interface) DescribeInstances(arg0 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	ret := m.ctrl.Call(m, "DescribeInstances", arg0)
	ret0, _ := ret[0].(*ec2.DescribeInstancesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstances indicates an expected call of DescribeInstances
func (mr *mockEc2InterfaceMockRecorder) DescribeInstances(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstances", reflect.TypeOf((*mockEc2Interface)(nil).DescribeInstances), arg0)
}
