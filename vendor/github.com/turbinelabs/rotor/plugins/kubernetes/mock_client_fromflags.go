// Code generated by MockGen. DO NOT EDIT.
// Source: client_fromflags.go

package kubernetes

import (
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
)

// mockClientFromFlags is a mock of clientFromFlags interface
type mockClientFromFlags struct {
	ctrl     *gomock.Controller
	recorder *mockClientFromFlagsMockRecorder
}

// mockClientFromFlagsMockRecorder is the mock recorder for mockClientFromFlags
type mockClientFromFlagsMockRecorder struct {
	mock *mockClientFromFlags
}

// newMockClientFromFlags creates a new mock instance
func newMockClientFromFlags(ctrl *gomock.Controller) *mockClientFromFlags {
	mock := &mockClientFromFlags{ctrl: ctrl}
	mock.recorder = &mockClientFromFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockClientFromFlags) EXPECT() *mockClientFromFlagsMockRecorder {
	return m.recorder
}

// Make mocks base method
func (m *mockClientFromFlags) Make() (*kubernetes.Clientset, error) {
	ret := m.ctrl.Call(m, "Make")
	ret0, _ := ret[0].(*kubernetes.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Make indicates an expected call of Make
func (mr *mockClientFromFlagsMockRecorder) Make() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*mockClientFromFlags)(nil).Make))
}
